def commonModule = [:]

pipeline {
    agent {
        label 'master'
    }
    environment {
        VAULT_ADDR = "https://vault-iit.apps.silver.devops.gov.bc.ca"
        PATH = "/sw_ux/node/current/bin:/sw_ux/bin:$PATH"
        FB_RUN_USER="wwwsvr"
        FB_S6_SERVICE_HOME = "/apps_ux/s6_services"
        FLUENTBIT_DB = "/apps_data/agents/fluent-bit/fluent-bit-logs.db"
        TAIL_FILES_LIKE = "${params.fluentbitFilesLike}"
        FB_BROKER_URL = "https://nr-broker.apps.silver.devops.gov.bc.ca"
        FB_CONFIG_ROLE_ID = credentials('knox-vault-jenkins-isss-role-id')
        FB_NR_BROKER_JWT = credentials('nr-broker-jwt')
    }
    stages {
        stage('Setup') {
            steps {
                script {
                    commonModule = load "pipelines/common.groovy"
                    env.FB_CAUSE_USER_ID = commonModule.getCauseUserId()
                    env.FB_HOST = commonModule.getHost("${params.fluentbitHost}")
                    env.FB_SERVER_OS = commonModule.getServerOS("${params.fluentbitHost}")
                    if (env.FB_SERVER_OS != "linux") {
                        currentBuild.result = 'ABORTED'
                        error('Invalid server OS')
                    }
                    env.FB_BIN_DIR = "${env.FB_SERVER_OS == "linux" ? "/sw_ux/bin" : "E:/sw_nt"}"
                    env.FB_AGENT_ROOT = "${env.FB_SERVER_OS == "linux" ? "/apps_ux/agents" : "E:/apps_nt/agents"}"
                    env.FB_VAULT_CD_USER_FIELD = commonModule.getVaultCdUserField("${params.fluentbitHost}")
                    env.FB_VAULT_CD_PASS_FIELD = commonModule.getVaultCdPassField("${params.fluentbitHost}")
                    env.FB_VAULT_CD_PATH = commonModule.getVaultCdPath("${params.fluentbitHost}")
                }
            }
        }
        stage('Get credentials') {
            steps {
                script {
                    env.FB_INTENTION_JSON = sh(
                        returnStdout: true,
                        script: "set +x; scripts/broker_intention_open.sh scripts/intention-fb-configure.json"
                    )
                    sh "scripts/broker_intention_action.sh start login"
                    env.VAULT_TOKEN = sh(
                        returnStdout: true,
                        script: "set +x; scripts/vault_token.sh"
                    )
                    env.FB_CD_USER = sh(
                        returnStdout: true,
                        script: "set +x; VAULT_ADDR=$VAULT_ADDR VAULT_TOKEN=$VAULT_TOKEN /sw_ux/bin/vault kv get -field=${env.FB_VAULT_CD_USER_FIELD} ${env.FB_VAULT_CD_PATH}"
                    )
                    env.FB_CD_PASS = sh(
                        returnStdout: true,
                        script: "set +x; VAULT_ADDR=$VAULT_ADDR VAULT_TOKEN=$VAULT_TOKEN /sw_ux/bin/vault kv get -field=${env.FB_VAULT_CD_PASS_FIELD} ${env.FB_VAULT_CD_PATH}"
                    )
                    sh "set +x; VAULT_ADDR=$VAULT_ADDR VAULT_TOKEN=$VAULT_TOKEN /sw_ux/bin/vault token revoke"
                }
            }
        }
        stage('Reload logs') {
            steps {
                sh "scripts/${FB_SERVER_OS.toLowerCase()}/reload_logs.sh"
                sh "scripts/broker_intention_action.sh end login"
            }
        }
    }
    post {
        success {
            sh "set +x; scripts/broker_intention_close.sh 'success'"
        }
        unstable {
            sh "set +x; scripts/broker_intention_close.sh 'failure'"
        }
        failure {
            sh "set +x; scripts/broker_intention_close.sh 'failure'"
        }
    }
}
