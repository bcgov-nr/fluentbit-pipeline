def commonModule = [:]

pipeline {
    agent {
        label 'podman'
    }
    environment {
        VAULT_ADDR = "https://vault-iit.apps.silver.devops.gov.bc.ca"
        FB_INSTALL_USER="wwwadm"
        FB_RUN_USER="wwwsvr"
        FB_AGENT = "${params.fluentbitAgent}"
        FB_S6_SERVICE_HOME = "/apps_ux/s6_services"
        FB_BROKER_URL = "https://nr-broker.apps.silver.devops.gov.bc.ca"
        FB_CONFIG_ROLE_ID = credentials('knox-vault-jenkins-role-id')
        FB_ROLE_ID = credentials('knox-vault-fluentbit-app-role-id')
        FB_NR_BROKER_JWT = credentials('nr-broker-jwt')
        ARTIFACTORY_URL = "artifacts.developer.gov.bc.ca/cc20-gen-docker-local"
        IMAGE_TAG = "${params.imageTag}"
        FB_BUILD_URL = "${env.BUILD_URL}"
    }
    stages {
        stage('Setup') {
            environment {
                HTTP_PROXY = "http://test-forwardproxy.nrs.bcgov:23128"
                FB_GIT_BRANCH = "${params.fbGitBranch}"                
            }
            steps {
                sh 'rm -rf $(pwd)/fb && mkdir $(pwd)/fb'
                sh '''
                    HTTP_PROXY=\$HTTP_PROXY podman run --rm --security-opt label=disable -v \$(pwd)/fb:/git -e "FB_GIT_BRANCH=${FB_GIT_BRANCH}" \
                    docker.io/alpine/git clone -b ${FB_GIT_BRANCH} https://github.com/bcgov-nr/nr-funbucks.git .
                '''
                sh 'mkdir $(pwd)/fb/output'
                script {
                    commonModule = load "pipelines/common.groovy"
                    env.FB_CAUSE_USER_ID = commonModule.getCauseUserId()
                    env.FB_HOST = commonModule.getHost("${params.fluentbitHost}")
                    env.FB_SERVER_OS = commonModule.getServerOS("${params.fluentbitHost}")
                    if (env.FB_SERVER_OS != "linux" && env.FB_SERVER_OS != "windows") {
                        currentBuild.result = 'ABORTED'
                        error('Invalid server OS')
                    }
                    env.FB_BIN_DIR = "${env.FB_SERVER_OS == "linux" ? "/sw_ux/bin" : "E:/sw_nt"}"
                    env.FB_AGENT_ROOT = "${env.FB_SERVER_OS == "linux" ? "/apps_ux/agents" : "E:/apps_nt/agents"}"
                    env.FB_VAULT_CD_USER_FIELD = commonModule.getVaultCdUserField("${params.fluentbitHost}")
                    env.FB_VAULT_CD_PASS_FIELD = commonModule.getVaultCdPassField("${params.fluentbitHost}")
                    env.FB_VAULT_CD_PATH = commonModule.getVaultCdPath("${params.fluentbitHost}")
                }
            }
        }
        stage('Get credentials') {
            steps {
                script {
                    env.FB_INTENTION_JSON = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -v \$(pwd)/scripts:/app/scripts \
                                -e 'FB_*' \
                                ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_open.sh scripts/intention-fb-install.json
                        '''
                    )
                    sh '''
                        set +x
                        podman run --rm \
                            -v \$(pwd)/scripts:/app/scripts \
                            -e 'FB_*' \
                            ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh start login
                    '''
                    env.VAULT_TOKEN = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -v \$(pwd)/scripts:/app/scripts \
                                -e 'FB_*' \
                                -e VAULT_ADDR=${VAULT_ADDR} \
                                ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/vault_token.sh
                        '''
                    ).trim()
                    env.FB_CD_USER = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -e SKIP_SETCAP=true \
                                -e 'FB_*' \
                                -e 'VAULT_*' \
                                docker.io/hashicorp/vault kv get -field=${FB_VAULT_CD_USER_FIELD} ${FB_VAULT_CD_PATH}
                        '''
                    )
                    env.FB_CD_PASS = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -e SKIP_SETCAP=true \
                                -e 'FB_*' \
                                -e 'VAULT_*' \
                                docker.io/hashicorp/vault kv get -field=${FB_VAULT_CD_PASS_FIELD} ${FB_VAULT_CD_PATH}
                        '''
                    )
                    sh '''
                        set +x
                        podman run --rm \
                                -e SKIP_SETCAP=true \
                                -e 'VAULT_*' \
                                docker.io/hashicorp/vault token revoke -self
                    '''
                    sh '''
                        set +x
                        podman run --rm \
                            -v \$(pwd)/scripts:/app/scripts \
                            -e 'FB_*' \
                            ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh start provision
                    '''
                    env.WRAPPED_FB_SECRET_ID = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -v \$(pwd)/scripts:/app/scripts \
                                -e 'FB_*' \
                                ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/vault_secret_id.sh
                        '''
                    ).trim()
                }
            }
        }
        stage('Start fluent bit') {
            steps {
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -e 'FB_*' \
                        -e VAULT_ADDR=${VAULT_ADDR} \
                        -e WRAPPED_FB_SECRET_ID=${WRAPPED_FB_SECRET_ID} \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/${FB_SERVER_OS}/start_fluentbit_agent.sh
                '''
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -e 'FB_*' \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh end provision
                '''
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -e 'FB_*' \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh end login
                '''
            }
        }
    }
    post {
        success {
            sh '''
                set +x
                podman run --rm \
                    -v \$(pwd)/scripts:/app/scripts \
                    -e 'FB_*' \
                    ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_close.sh 'success'
            '''
        }
        unstable {
            sh '''
                set +x
                podman run --rm \
                    -v \$(pwd)/scripts:/app/scripts \
                    -e 'FB_*' \
                    ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_close.sh 'failure'
            '''
        }
        failure {
            sh '''
                set +x
                podman run --rm \
                    -v \$(pwd)/scripts:/app/scripts \
                    -e 'FB_*' \
                    ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_close.sh 'failure'
            '''
        }
    }
}
