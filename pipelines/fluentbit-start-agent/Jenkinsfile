@Library('polaris')
import ca.bc.gov.nrids.polaris.Podman
import ca.bc.gov.nrids.polaris.BrokerIntention
import ca.bc.gov.nrids.polaris.Vault

def podman
def intention
def commonModule = [:]

pipeline {
    agent {
        label 'podman'
    }
    environment {
        VAULT_ADDR = "https://vault-iit.apps.silver.devops.gov.bc.ca"
        FB_INSTALL_USER="wwwadm"
        FB_RUN_USER="wwwsvr"
        FB_AGENT = "${params.fluentbitAgent}"
        FB_S6_SERVICE_HOME = "/apps_ux/s6_services"
        FB_BROKER_URL = "https://nr-broker.apps.silver.devops.gov.bc.ca"
        FB_CONFIG_ROLE_ID = credentials('knox-vault-jenkins-role-id')
        FB_ROLE_ID = credentials('knox-vault-fluentbit-app-role-id')
        NR_BROKER_JWT = credentials('nr-broker-jwt')
        IMAGE_TAG = "${params.imageTag}"
        AUTHFILE = "fluent-bit.auth.json"
    }
    stages {
        stage('Setup') {
            environment {
                HTTP_PROXY = "http://test-forwardproxy.nrs.bcgov:23128"
                FB_GIT_BRANCH = "${params.fbGitBranch}"
            }
            steps {
                sh 'rm -rf $(pwd)/fb && mkdir $(pwd)/fb'
                script {
                    commonModule = load "pipelines/common.groovy"
                    intention = new BrokerIntention(readJSON(file: 'scripts/intention-fb-install.json'))
                    intention.userId = commonModule.getCauseUserId()
                    intention.eventUrl = env.BUILD_URL
                    intention.open(NR_BROKER_JWT)
                    intention.startAction("login")
                    def vaultToken = intention.provisionToken("login", FB_CONFIG_ROLE_ID)
                    def vault = new Vault(vaultToken)
                    def registryCreds = vault.read('apps/data/prod/jenkins/jenkins-polaris/artifacts-artifacts-c2053d-ehahkw-qgubfm')
                    env.REGISTRY_USERNAME = registryCreds['username']
                    env.REGISTRY_PASSWORD = registryCreds['password']
                    podman = new Podman(this)
                    podman.login(authfile: "${env.AUTHFILE}", options: "-u ${env.REGISTRY_USERNAME} -p ${env.REGISTRY_PASSWORD}")
                    podman.run("alpine/git:latest",
                        httpProxy: '\$HTTP_PROXY',
                        authfile: "${env.AUTHFILE}",
                        options: "--security-opt label=disable -v \$(pwd)/fb:/git -e FB_GIT_BRANCH=${FB_GIT_BRANCH}",
                        command: "clone -b ${FB_GIT_BRANCH} https://github.com/bcgov-nr/nr-funbucks.git .")
                    env.FB_HOST = commonModule.getHost("${params.fluentbitHost}")
                    env.FB_SERVER_OS = commonModule.getServerOS("${params.fluentbitHost}")
                    if (env.FB_SERVER_OS != "linux" && env.FB_SERVER_OS != "windows") {
                        currentBuild.result = 'ABORTED'
                        error('Invalid server OS')
                    }
                    env.FB_BIN_DIR = "${env.FB_SERVER_OS == "linux" ? "/sw_ux/bin" : "E:/sw_nt"}"
                    env.FB_AGENT_ROOT = "${env.FB_SERVER_OS == "linux" ? "/apps_ux/agents" : "E:/apps_nt/agents"}"
                    env.FB_VAULT_CD_USER_FIELD = commonModule.getVaultCdUserField("${params.fluentbitHost}")
                    env.FB_VAULT_CD_PASS_FIELD = commonModule.getVaultCdPassField("${params.fluentbitHost}")
                    env.FB_VAULT_CD_PATH = commonModule.getVaultCdPath("${params.fluentbitHost}")
                    def vault_cd_path = "${env.FB_VAULT_CD_PATH}"
                    def cdCreds = vault.read(vault_cd_path.replaceFirst('/', '/data/'))
                    env.FB_CD_USER = cdCreds[env.FB_VAULT_CD_USER_FIELD]
                    env.FB_CD_PASS = cdCreds[env.FB_VAULT_CD_PASS_FIELD]
                    vault.revokeToken()
                    intention.startAction("provision")
                    def wrapped_fb_secret_id = intention.provisionSecretId("provision", FB_ROLE_ID)
                    env.WRAPPED_FB_SECRET_ID = wrapped_fb_secret_id
                }
            }
        }
        stage('Start fluent bit') {
            steps {
                script {
                    podman = new Podman(this, null, "artifacts.developer.gov.bc.ca/cc20-gen-docker-local")
                    podman.login(authfile: "${env.AUTHFILE}", options: "-u ${env.REGISTRY_USERNAME} -p ${env.REGISTRY_PASSWORD}")
                    podman.run("fb-helper:${params.imageTag}",
                        authfile: "${env.AUTHFILE}",
                        options: "-v \$(pwd)/scripts:/app/scripts -e 'FB_*' -e VAULT_ADDR=${VAULT_ADDR} -e 'WRAPPED_FB_SECRET_ID*'",
                        command: "scripts/${FB_SERVER_OS.toLowerCase()}/start_fluentbit_agent.sh")
                    intention.endAction("provision")
                    intention.endAction("login")
                }
            }
        }
    }
    post {
        success {
            script {
                intention.close(true)
            }
        }
        unstable {
            script {
                if (intention) {
                    intention.close(false)
                }
            }
        }
        failure {
            script {
                if (intention) {
                    intention.close(false)
                }
            }
        }
    }
}
