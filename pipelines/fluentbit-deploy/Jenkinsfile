def commonModule = [:]

pipeline {
    agent {
        label 'master'
    }
    environment {
        PATH = "/sw_ux/node/current/bin:/sw_ux/bin:$PATH"
        PIPELINE_ARTIFACTORY_CREDS = credentials('d7d54e7d-10c1-4466-a6d6-82ea62699416')
        FUNBUCKS_OUTPUT = "nr-funbucks/output"
        VAULT_ADDR = "https://vault-iit.apps.silver.devops.gov.bc.ca"
        S6_SERVICE_HOME = "/apps_ux/s6_services"
        INSTALL_USER = "wwwadm"
        RUN_USER = "wwwsvr"
        VAULT_RELEASE = "1.10.4"
        ENVCONSUL_RELEASE = "0.12.1"
        JQ_RELEASE = "1.6"
        SQLITE_RELEASE = "3.38.5"
        WINSW_RELEASE = "v2.11.0"
        BROKER_URL = "https://nr-broker.apps.silver.devops.gov.bc.ca"
        CONFIG_ROLE_ID = credentials('knox-vault-jenkins-isss-role-id')
        FB_ROLE_ID = credentials('knox-vault-fluentbit-app-role-id')
        BASIC_HTTP_USER = "brokeruser"
        BASIC_HTTP_PASSWORD = credentials('nr-broker-password')
    }
    stages {
        stage('Setup') {
            steps {
                script {
                    commonModule = load "pipelines/common.groovy"
                    env.CAUSE_USER_ID = commonModule.getCauseUserId()
                    env.FLUENTBIT_RELEASE = commonModule.getFluentBitRelease("${params.fluentbitHost}")
                    env.HOST = commonModule.getHost("${params.fluentbitHost}")
                    env.SERVER_OS = commonModule.getServerOS("${params.fluentbitHost}")
                    if (env.SERVER_OS != "linux" && env.SERVER_OS != "windows") {
                        currentBuild.result = 'ABORTED'
                        error('Invalid server OS')
                    }
                    env.OS_VARIANT = commonModule.getOSVariant("${params.fluentbitHost}")
                    env.BIN_DIR = "${env.SERVER_OS == "linux" ? "/sw_ux/bin" : "E:/sw_nt"}"
                    env.AGENT_ROOT = "${env.SERVER_OS == "linux" ? "/apps_ux/agents" : "E:/apps_nt/agents"}"
                    env.TMP_DIR = "${env.SERVER_OS == "linux" ? "/tmp/fluent-bit.${UUID.randomUUID().toString()[0..7]}" : "E:/tmp/fluent-bit.${UUID.randomUUID().toString()[0..7]}"}"
                    env.VAULT_CD_USER_FIELD = commonModule.getVaultCdUserField("${params.fluentbitHost}")
                    env.VAULT_CD_PASS_FIELD = commonModule.getVaultCdPassField("${params.fluentbitHost}")
                    env.VAULT_CD_PATH = commonModule.getVaultCdPath("${params.fluentbitHost}")
                }
            }
        }
        stage('Funbucks') {
            environment {
                HTTP_PROXY = commonModule.getHttpProxy("${params.fluentbitHost}")
                HTTPS_PROXY = commonModule.getHttpProxy("${params.fluentbitHost}")
                NO_PROXY = "https://vault-iit.apps.silver.devops.gov.bc.ca"
            }
            steps {
                sh '''set +x; pass=`echo -n "$PIPELINE_ARTIFACTORY_CREDS_USR:$PIPELINE_ARTIFACTORY_CREDS_PSW" | openssl base64 -A`
echo "email=$PIPELINE_ARTIFACTORY_CREDS_USR
always-auth=true
strict-ssl=false
registry=http://bwa.nrs.gov.bc.ca/int/artifactory/api/npm/nrs-virtual-npm/
_auth=$pass
" > .npmrc'''
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'nr-funbucks']],
                    gitTool: 'jgit',
                    submoduleCfg: [],
                    userRemoteConfigs: [
                        [
                            credentialsId: 'f1e16323-de75-4eac-a5a0-f1fc733e3621',
                            url: 'https://bwa.nrs.gov.bc.ca/int/stash/scm/oneteam/oneteam-nr-funbucks.git'
                        ]
                    ]
                ])
                sh 'cd nr-funbucks; npm ci'
            }

        }
        stage('Build config') {
            steps {
                sh "nr-funbucks/bin/dev gen -m -s ${params.fluentbitHost}"
            }
        }
        stage('Get credentials') {
            steps {
                script {
                    env.INTENTION_JSON = sh(
                        returnStdout: true,
                        script: "set +x; scripts/broker_intention_open.sh scripts/intention-fb-install.json"
                    )
                    env.VAULT_TOKEN = sh(
                        returnStdout: true,
                        script: "set +x; scripts/vault_token.sh"
                    )
                    env.CD_USER = sh(
                        returnStdout: true,
                        script: "set +x; VAULT_ADDR=$VAULT_ADDR VAULT_TOKEN=$VAULT_TOKEN /sw_ux/bin/vault kv get -field=${env.VAULT_CD_USER_FIELD} ${env.VAULT_CD_PATH}"
                    )
                    env.CD_PASS = sh(
                        returnStdout: true,
                        script: "set +x; VAULT_ADDR=$VAULT_ADDR VAULT_TOKEN=$VAULT_TOKEN /sw_ux/bin/vault kv get -field=${env.VAULT_CD_PASS_FIELD} ${env.VAULT_CD_PATH}"
                    )                    
                    env.CI_USER = sh(
                        returnStdout: true,
                        script: "set +x; VAULT_ADDR=$VAULT_ADDR VAULT_TOKEN=$VAULT_TOKEN /sw_ux/bin/vault kv get -field=username_lowercase groups/appdelivery/jenkins-isss-ci"
                    )
                    env.CI_PASS = sh(
                        returnStdout: true,
                        script: "set +x; VAULT_ADDR=$VAULT_ADDR VAULT_TOKEN=$VAULT_TOKEN /sw_ux/bin/vault kv get -field=password groups/appdelivery/jenkins-isss-ci"
                    )                    
                }
            }
        }
        stage('Copy') {
            steps {
                sh "scripts/${SERVER_OS.toLowerCase()}/copy_files.sh"
            }
        }
        stage('Stop fluent bit') {
            steps {
                sh "scripts/${SERVER_OS.toLowerCase()}/stop_fluentbit.sh"
            }
        }
        stage('Remove previous agents') {
            steps {
                sh "scripts/${SERVER_OS.toLowerCase()}/remove_agents.sh"
            }
        }
        stage('Deploy agents') {
            environment {
                HTTP_PROXY_URL = commonModule.getHttpProxy("${params.fluentbitHost}")
                LOGS_PROXY_DISABLED = commonModule.getLogsProxyDisabled("${params.fluentbitHost}")
                HTTP_PROXY = "${env.LOGS_PROXY_DISABLED == 'true' ? '' : env.HTTP_PROXY_URL}"
                HTTPS_PROXY = "${env.LOGS_PROXY_DISABLED == 'true' ? '' : env.HTTP_PROXY_URL}"
                NO_PROXY = "https://vault-iit.apps.silver.devops.gov.bc.ca"
            }
            steps {
                script {
                    if (env.SERVER_OS == "linux") {
                        sh 'scripts/linux/deploy_agents.sh'
                    } else if (env.SERVER_OS == "windows") {
                        sh 'scripts/windows/deploy_agents_base.sh'
                        sh 'scripts/windows/deploy_agents_service.sh'
                    }
                }
            }
        }
        stage('Get secret') {
            steps {
                script {
                    env.WRAPPED_FB_SECRET_ID = sh(
                        returnStdout: true,
                        script: "set +x; scripts/vault_secret_id.sh"
                    )
                }
            }
        }
        stage('Start fluent bit') {
            steps {
                sh "scripts/${SERVER_OS.toLowerCase()}/start_fluentbit_agent.sh"
            }
        }
    }
    post {
        success {
            sh "set +x; scripts/broker_intention_close.sh 'success'"
        }
        unstable {
            sh "set +x; scripts/broker_intention_close.sh 'failure'"
        }
        failure {
            sh "set +x; scripts/broker_intention_close.sh 'failure'"
        }
    }
}
