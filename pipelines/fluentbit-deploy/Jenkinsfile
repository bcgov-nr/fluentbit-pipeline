@Library('polaris') import ca.bc.gov.nrids.polaris.Podman
def podman = new Podman(this, env)
def podmanLocal = new Podman(this, env, "artifacts.developer.gov.bc.ca/cc20-gen-docker-local")
def commonModule = [:]

pipeline {
    agent {
        label 'podman'
    }
    environment {
        FB_PIPELINE_ARTIFACTORY_CREDS = credentials('ci-user')
        FB_FUNBUCKS_OUTPUT = "fb/output"
        VAULT_ADDR = "https://vault-iit.apps.silver.devops.gov.bc.ca"
        FB_S6_SERVICE_HOME = "/apps_ux/s6_services"
        FB_INSTALL_USER = "wwwadm"
        FB_RUN_USER = "wwwsvr"
        FB_VAULT_RELEASE = "1.10.4"
        FB_ENVCONSUL_RELEASE = "0.12.1"
        FB_JQ_RELEASE = "1.6"
        FB_SQLITE_RELEASE = "3.38.5"
        FB_WINSW_RELEASE = "v2.11.0"
        FB_BROKER_URL = "https://nr-broker.apps.silver.devops.gov.bc.ca"
        FB_BUILD_URL = "${env.BUILD_URL}"
        PODMAN_HOST = "freight.bcgov"
        ARTIFACTORY_URL = "artifacts.developer.gov.bc.ca/cc20-gen-docker-local"
        FB_CONFIG_ROLE_ID = credentials('knox-vault-jenkins-role-id')
        FB_ROLE_ID = credentials('knox-vault-fluentbit-app-role-id')
        FB_NR_BROKER_JWT = credentials('nr-broker-jwt')
        IMAGE_TAG = "${params.imageTag}"
    }
    stages {
        stage('Setup') {
            environment {
                HTTP_PROXY = "http://test-forwardproxy.nrs.bcgov:23128"
                FB_GIT_BRANCH = "${params.fbGitBranch}"                
            }            
            steps {
                sh 'rm -rf $(pwd)/fb && mkdir $(pwd)/fb'
                script {
                    podman.run("alpine/git:latest",
                        httpProxy: '\$HTTP_PROXY',
                        options: "--security-opt label=disable -v \$(pwd)/fb:/git -e FB_GIT_BRANCH=${FB_GIT_BRANCH}",
                        command: "clone -b ${FB_GIT_BRANCH} https://github.com/bcgov-nr/nr-funbucks.git .",
                        skipPipelineEnv: true)                        
                }
                sh 'mkdir $(pwd)/fb/output'
                script {
                    commonModule = load "pipelines/common.groovy"
                    env.FB_CAUSE_USER_ID = commonModule.getCauseUserId()
                    env.FB_FLUENTBIT_RELEASE = commonModule.getFluentBitRelease("${params.fluentbitHost}")
                    env.FB_HOST = commonModule.getHost("${params.fluentbitHost}")
                    env.FB_SERVER_OS = commonModule.getServerOS("${params.fluentbitHost}")
                    if (env.FB_SERVER_OS != "linux" && env.FB_SERVER_OS != "windows") {
                        currentBuild.result = 'ABORTED'
                        error('Invalid server OS')
                    }
                    env.FB_OS_VARIANT = commonModule.getOSVariant("${params.fluentbitHost}")
                    env.FB_BIN_DIR = "${env.FB_SERVER_OS == "linux" ? "/sw_ux/bin" : "E:/sw_nt"}"
                    env.FB_AGENT_ROOT = "${env.FB_SERVER_OS == "linux" ? "/apps_ux/agents" : "E:/apps_nt/agents"}"
                    env.FB_TMP_DIR = "${env.FB_SERVER_OS == "linux" ? "/tmp/fluent-bit.${UUID.randomUUID().toString()[0..7]}" : "E:/tmp/fluent-bit.${UUID.randomUUID().toString()[0..7]}"}"
                    env.FB_VAULT_CD_USER_FIELD = commonModule.getVaultCdUserField("${params.fluentbitHost}")
                    env.FB_VAULT_CD_PASS_FIELD = commonModule.getVaultCdPassField("${params.fluentbitHost}")
                    env.FB_VAULT_CD_PATH = commonModule.getVaultCdPath("${params.fluentbitHost}")
                    env.HTTP_PROXY_URL = commonModule.getHttpProxy("${params.fluentbitHost}")
                    env.LOGS_PROXY_DISABLED = commonModule.getLogsProxyDisabled("${params.fluentbitHost}")
                    env.LOGS_HTTP_PROXY = "${env.LOGS_PROXY_DISABLED == 'true' ? '' : env.HTTP_PROXY_URL}"
                    env.NO_PROXY = "https://vault-iit.apps.silver.devops.gov.bc.ca"
                }
            }
        }
        stage('Build config') {
            steps {
                script {
                    podmanLocal.run("nr-funbucks:${params.imageTag}",
                        options: "-v \$(pwd)/fb/config:/app/config -v \$(pwd)/fb/output:/app/output",
                        command: "gen -m -s ${params.fluentbitHost}",
                        skipPipelineEnv: true)
                }                
            }
        }
        stage('Get credentials') {
            steps {
                script {
                    env.FB_INTENTION_JSON = podmanLocal.run(                        
                        "fb-helper:${IMAGE_TAG}",
                        options: "-v \$(pwd)/scripts:/app/scripts -e 'FB_*'",
                        command: "scripts/broker_intention_open.sh scripts/intention-fb-install.json",
                        skipPipelineEnv: true,
                        returnStdout: true)
                    sh '''
                        set +x
                        podman run --rm \
                            -v \$(pwd)/scripts:/app/scripts \
                            -e 'FB_*' \
                            ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh start login
                    '''
                    env.VAULT_TOKEN = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -v \$(pwd)/scripts:/app/scripts \
                                -e 'FB_*' \
                                -e VAULT_ADDR=${VAULT_ADDR} \
                                ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/vault_token.sh
                        '''
                    ).trim()
                    env.FB_CD_USER = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -e SKIP_SETCAP=true \
                                -e 'FB_*' \
                                -e 'VAULT_*' \
                                docker.io/hashicorp/vault kv get -field=${FB_VAULT_CD_USER_FIELD} ${FB_VAULT_CD_PATH}
                        '''
                    )
                    env.FB_CD_PASS = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -e SKIP_SETCAP=true \
                                -e 'FB_*' \
                                -e 'VAULT_*' \
                                docker.io/hashicorp/vault kv get -field=${FB_VAULT_CD_PASS_FIELD} ${FB_VAULT_CD_PATH}
                        '''
                    )
                    env.FB_CI_USER = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -e SKIP_SETCAP=true \
                                -e 'VAULT_*' \
                                docker.io/hashicorp/vault kv get -field=username_lowercase groups/appdelivery/jenkins-isss-ci
                        '''
                    )
                    env.FB_CI_PASS = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -e SKIP_SETCAP=true \
                                -e 'VAULT_*' \
                                docker.io/hashicorp/vault kv get -field=password groups/appdelivery/jenkins-isss-ci
                        '''
                    )
                    sh '''
                        set +x
                        podman run --rm \
                                -e SKIP_SETCAP=true \
                                -e 'VAULT_*' \
                                docker.io/hashicorp/vault token revoke -self
                    '''
                }
            }
        }
        stage('Copy') {
            steps {
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -e 'FB_*' \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh start install
                '''
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -v \$(pwd)/fb:/app/fb \
                        -v \$(pwd)/files:/app/files \
                        -e 'FB_*' \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/${FB_SERVER_OS}/copy_files.sh
                '''
            }
        }
        stage('Stop fluent bit') {
            steps {
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -e 'FB_*' \
                        -e VAULT_ADDR=${VAULT_ADDR} \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/${FB_SERVER_OS}/stop_fluentbit.sh
                '''
            }
        }
        stage('Remove previous agents') {
            steps {
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -e 'FB_*' \
                        -e VAULT_ADDR=${VAULT_ADDR} \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/${FB_SERVER_OS}/remove_agents.sh
                '''
            }
        }
        stage('Deploy agents') {
            steps {
                script {
                    if (env.FB_SERVER_OS == "linux") {
                        sh '''
                            set +x
                            podman run --rm \
                                -v \$(pwd)/scripts:/app/scripts \
                                -e 'FB_*' \
                                -e VAULT_ADDR=${VAULT_ADDR} \
                                -e HTTP_PROXY=${LOGS_HTTP_PROXY} \
                                -e NO_PROXY=${NO_PROXY} \
                                ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/linux/deploy_agents.sh
                        '''
                    } else if (env.FB_SERVER_OS == "windows") {
                        sh '''
                            set +x
                            podman run --rm \
                                -v \$(pwd)/scripts:/app/scripts \
                                -e 'FB_*' \
                                -e VAULT_ADDR=${VAULT_ADDR} \
                                -e HTTP_PROXY=${LOGS_HTTP_PROXY} \
                                -e NO_PROXY=${NO_PROXY} \
                                ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/windows/deploy_agents_base.sh
                        '''
                        sh '''
                            set +x
                            podman run --rm \
                                -v \$(pwd)/scripts:/app/scripts \
                                -e 'FB_*' \
                                -e VAULT_ADDR=${VAULT_ADDR} \
                                -e HTTP_PROXY=${LOGS_HTTP_PROXY} \
                                -e NO_PROXY=${NO_PROXY} \
                                ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/windows/deploy_agents_service.sh
                        '''
                    }
                    sh '''
                        set +x
                        podman run --rm \
                            -v \$(pwd)/scripts:/app/scripts \
                            -e 'FB_*' \
                            ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh end install
                    '''
                }
            }
        }
        stage('Get secret') {
            steps {
                script {
                    sh '''
                        set +x
                        podman run --rm \
                            -v \$(pwd)/scripts:/app/scripts \
                            -e 'FB_*' \
                            ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh start provision
                    '''
                    env.WRAPPED_FB_SECRET_ID = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -v \$(pwd)/scripts:/app/scripts \
                                -e 'FB_*' \
                                ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/vault_secret_id.sh
                        '''
                    ).trim()
                }
            }
        }
        stage('Start fluent bit') {
            steps {
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -e 'FB_*' \
                        -e VAULT_ADDR=${VAULT_ADDR} \
                        -e WRAPPED_FB_SECRET_ID=${WRAPPED_FB_SECRET_ID} \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/${FB_SERVER_OS}/start_fluentbit_agent.sh
                '''
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -e 'FB_*' \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh end provision
                '''
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -e 'FB_*' \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh end login
                '''
            }
        }
    }
    post {
        success {
            sh '''
                set +x
                podman run --rm \
                    -v \$(pwd)/scripts:/app/scripts \
                    -e 'FB_*' \
                    ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_close.sh 'success'
            '''
        }
        unstable {
            sh '''
                set +x
                podman run --rm \
                    -v \$(pwd)/scripts:/app/scripts \
                    -e 'FB_*' \
                    ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_close.sh 'failure'
            '''
        }
        failure {
            sh '''
                set +x
                podman run --rm \
                    -v \$(pwd)/scripts:/app/scripts \
                    -e 'FB_*' \
                    ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_close.sh 'failure'
            '''
        }
    }
}
