def commonModule = [:]

pipeline {
    agent {
        label 'podman'
    }
    environment {
        PIPELINE_ARTIFACTORY_CREDS = credentials('ci-user')
        FUNBUCKS_OUTPUT = "fb/output"
        VAULT_ADDR = "https://vault-iit.apps.silver.devops.gov.bc.ca"
        S6_SERVICE_HOME = "/apps_ux/s6_services"
        INSTALL_USER = "wwwadm"
        RUN_USER = "wwwsvr"
        VAULT_RELEASE = "1.10.4"
        ENVCONSUL_RELEASE = "0.12.1"
        JQ_RELEASE = "1.6"
        SQLITE_RELEASE = "3.38.5"
        WINSW_RELEASE = "v2.11.0"
        BROKER_URL = "https://nr-broker.apps.silver.devops.gov.bc.ca"
        PODMAN_HOST = "freight.bcgov"
        ARTIFACTORY_URL = "artifacts.developer.gov.bc.ca/cc20-gen-docker-local"
        CONFIG_ROLE_ID = credentials('knox-vault-jenkins-role-id')
        FB_ROLE_ID = credentials('knox-vault-fluentbit-app-role-id')
        NR_BROKER_JWT = credentials('nr-broker-jwt')
        IMAGE_TAG = "${params.imageTag}"
    }
    stages {
        stage('Setup') {
            environment {
                HTTP_PROXY = "http://test-forwardproxy.nrs.bcgov:23128"
                FB_GIT_BRANCH = "${params.fbGitBranch}"
            }            
            steps {
                sh 'rm -rf $(pwd)/fb && mkdir $(pwd)/fb'
                sh '''
                    HTTP_PROXY=\$HTTP_PROXY podman run --rm --security-opt label=disable -v \$(pwd)/fb:/git -e "FB_GIT_BRANCH=${FB_GIT_BRANCH}" \
                    docker.io/alpine/git clone -b ${FB_GIT_BRANCH} https://github.com/bcgov-nr/nr-funbucks.git .
                '''
                sh 'mkdir $(pwd)/fb/output'
                script {
                    commonModule = load "pipelines/common.groovy"
                    env.CAUSE_USER_ID = commonModule.getCauseUserId()
                    env.FLUENTBIT_RELEASE = commonModule.getFluentBitRelease("${params.fluentbitHost}")
                    env.HOST = commonModule.getHost("${params.fluentbitHost}")
                    env.SERVER_OS = commonModule.getServerOS("${params.fluentbitHost}")
                    if (env.SERVER_OS != "linux" && env.SERVER_OS != "windows") {
                        currentBuild.result = 'ABORTED'
                        error('Invalid server OS')
                    }
                    env.OS_VARIANT = commonModule.getOSVariant("${params.fluentbitHost}")
                    env.BIN_DIR = "${env.SERVER_OS == "linux" ? "/sw_ux/bin" : "E:/sw_nt"}"
                    env.AGENT_ROOT = "${env.SERVER_OS == "linux" ? "/apps_ux/agents" : "E:/apps_nt/agents"}"
                    env.TMP_DIR = "${env.SERVER_OS == "linux" ? "/tmp/fluent-bit.${UUID.randomUUID().toString()[0..7]}" : "E:/tmp/fluent-bit.${UUID.randomUUID().toString()[0..7]}"}"
                    env.VAULT_CD_USER_FIELD = commonModule.getVaultCdUserField("${params.fluentbitHost}")
                    env.VAULT_CD_PASS_FIELD = commonModule.getVaultCdPassField("${params.fluentbitHost}")
                    env.VAULT_CD_PATH = commonModule.getVaultCdPath("${params.fluentbitHost}")
                    env.HTTP_PROXY_URL = commonModule.getHttpProxy("${params.fluentbitHost}")
                    env.LOGS_PROXY_DISABLED = commonModule.getLogsProxyDisabled("${params.fluentbitHost}")
                    env.LOGS_HTTP_PROXY = "${env.LOGS_PROXY_DISABLED == 'true' ? '' : env.HTTP_PROXY_URL}"
                    env.NO_PROXY = "https://vault-iit.apps.silver.devops.gov.bc.ca"
                }
            }
        }
        stage('Build config') {
            steps {
                sh "podman run --rm -v \$(pwd)/fb/config:/app/config -v \$(pwd)/fb/output:/app/output ${ARTIFACTORY_URL}/nr-funbucks:${params.imageTag} gen -m -s ${params.fluentbitHost}"
            }
        }
        stage('Get credentials') {
            steps {
                script {
                    env.INTENTION_JSON = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -v \$(pwd)/scripts:/app/scripts \
                                -e BUILD_URL=${BUILD_URL} \
                                -e CAUSE_USER_ID=${CAUSE_USER_ID} \
                                -e BROKER_URL=${BROKER_URL} \
                                -e NR_BROKER_JWT=${NR_BROKER_JWT} \
                                ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_open.sh scripts/intention-fb-install.json
                        '''
                    )
                    sh '''
                        set +x
                        podman run --rm \
                            -v \$(pwd)/scripts:/app/scripts \
                            -e INTENTION_JSON="${INTENTION_JSON}" \
                            -e BROKER_URL=${BROKER_URL} \
                            ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh start login
                    '''
                    env.VAULT_TOKEN = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -v \$(pwd)/scripts:/app/scripts \
                                -e INTENTION_JSON="${INTENTION_JSON}" \
                                -e BROKER_URL=${BROKER_URL} \
                                -e VAULT_ADDR=${VAULT_ADDR} \
                                -e CONFIG_ROLE_ID=${CONFIG_ROLE_ID} \
                                ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/vault_token.sh
                        '''
                    ).trim()
                    env.CD_USER = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -e SKIP_SETCAP=true \
                                -e VAULT_ADDR=${VAULT_ADDR} \
                                -e VAULT_TOKEN=${VAULT_TOKEN} \
                                -e VAULT_CD_USER_FIELD=${VAULT_CD_USER_FIELD} \
                                -e VAULT_CD_PATH=${VAULT_CD_PATH} \
                                docker.io/hashicorp/vault kv get -field=${VAULT_CD_USER_FIELD} ${VAULT_CD_PATH}
                        '''
                    )
                    env.CD_PASS = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -e SKIP_SETCAP=true \
                                -e VAULT_ADDR=${VAULT_ADDR} \
                                -e VAULT_TOKEN=${VAULT_TOKEN} \
                                -e VAULT_CD_PASS_FIELD=${VAULT_CD_PASS_FIELD} \
                                -e VAULT_CD_PATH=${VAULT_CD_PATH} \
                                docker.io/hashicorp/vault kv get -field=${VAULT_CD_PASS_FIELD} ${VAULT_CD_PATH}
                        '''
                    )
                    env.CI_USER = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -e SKIP_SETCAP=true \
                                -e VAULT_ADDR=${VAULT_ADDR} \
                                -e VAULT_TOKEN=${VAULT_TOKEN} \
                                docker.io/hashicorp/vault kv get -field=username_lowercase groups/appdelivery/jenkins-isss-ci
                        '''
                    )
                    env.CI_PASS = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -e SKIP_SETCAP=true \
                                -e VAULT_ADDR=${VAULT_ADDR} \
                                -e VAULT_TOKEN=${VAULT_TOKEN} \
                                docker.io/hashicorp/vault kv get -field=password groups/appdelivery/jenkins-isss-ci
                        '''
                    )
                    sh '''
                        set +x
                        podman run --rm \
                                -e SKIP_SETCAP=true \
                                -e VAULT_ADDR=${VAULT_ADDR} \
                                -e VAULT_TOKEN=${VAULT_TOKEN} \
                                docker.io/hashicorp/vault token revoke -self
                    '''
                }
            }
        }
        stage('Copy') {
            steps {
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -e INTENTION_JSON="${INTENTION_JSON}" \
                        -e BROKER_URL=${BROKER_URL} \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh start install
                '''
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -v \$(pwd)/fb:/app/fb \
                        -v \$(pwd)/files:/app/files \
                        -e SERVER_OS=${SERVER_OS} \
                        -e CD_USER=${CD_USER} \
                        -e CD_PASS=${CD_PASS} \
                        -e HOST=${HOST} \
                        -e INSTALL_USER=${INSTALL_USER} \
                        -e TMP_DIR=${TMP_DIR} \
                        -e FUNBUCKS_OUTPUT=${FUNBUCKS_OUTPUT} \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/${SERVER_OS}/copy_files.sh
                '''
            }
        }
        stage('Stop fluent bit') {
            steps {
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -e SERVER_OS=${SERVER_OS} \
                        -e CD_USER=${CD_USER} \
                        -e CD_PASS=${CD_PASS} \
                        -e HOST=${HOST} \
                        -e RUN_USER=${RUN_USER} \
                        -e AGENT_ROOT=${AGENT_ROOT} \
                        -e S6_SERVICE_HOME=${S6_SERVICE_HOME} \
                        -e VAULT_ADDR=${VAULT_ADDR} \
                        -e BIN_DIR=${BIN_DIR} \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/${SERVER_OS}/stop_fluentbit.sh
                '''
            }
        }
        stage('Remove previous agents') {
            steps {
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -e SERVER_OS=${SERVER_OS} \
                        -e CD_USER=${CD_USER} \
                        -e CD_PASS=${CD_PASS} \
                        -e HOST=${HOST} \
                        -e RUN_USER=${RUN_USER} \
                        -e INSTALL_USER=${INSTALL_USER} \
                        -e AGENT_ROOT=${AGENT_ROOT} \
                        -e S6_SERVICE_HOME=${S6_SERVICE_HOME} \
                        -e VAULT_ADDR=${VAULT_ADDR} \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/${SERVER_OS}/remove_agents.sh
                '''
            }
        }
        stage('Deploy agents') {
            steps {
                script {
                    if (env.SERVER_OS == "linux") {
                        sh '''
                            set +x
                            podman run --rm \
                                -v \$(pwd)/scripts:/app/scripts \
                                -e CD_USER=${CD_USER} \
                                -e CD_PASS=${CD_PASS} \
                                -e HOST=${HOST} \
                                -e INSTALL_USER=${INSTALL_USER} \
                                -e TMP_DIR=${TMP_DIR} \
                                -e BIN_DIR=${BIN_DIR} \
                                -e HTTP_PROXY=${LOGS_HTTP_PROXY} \
                                -e CI_USER=${CI_USER} \
                                -e CI_PASS=${CI_PASS} \
                                -e VAULT_RELEASE=${VAULT_RELEASE} \
                                -e ENVCONSUL_RELEASE=${ENVCONSUL_RELEASE} \
                                -e JQ_RELEASE=${JQ_RELEASE} \
                                -e FLUENTBIT_RELEASE=${FLUENTBIT_RELEASE} \
                                -e OS_VARIANT=${OS_VARIANT} \
                                -e SQLITE_RELEASE=${SQLITE_RELEASE} \
                                -e AGENT_ROOT=${AGENT_ROOT} \
                                -e S6_SERVICE_HOME=${S6_SERVICE_HOME} \
                                -e RUN_USER=${RUN_USER} \
                                -e NO_PROXY=${NO_PROXY} \
                                ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/linux/deploy_agents.sh
                        '''
                    } else if (env.SERVER_OS == "windows") {
                        sh '''
                            set +x
                            podman run --rm \
                                -v \$(pwd)/scripts:/app/scripts \
                                -e CD_USER=${CD_USER} \
                                -e CD_PASS=${CD_PASS} \
                                -e HOST=${HOST} \
                                -e TMP_DIR=${TMP_DIR} \
                                -e BIN_DIR=${BIN_DIR} \
                                -e HTTP_PROXY=${LOGS_HTTP_PROXY} \
                                -e VAULT_RELEASE=${VAULT_RELEASE} \
                                -e ENVCONSUL_RELEASE=${ENVCONSUL_RELEASE} \
                                -e JQ_RELEASE=${JQ_RELEASE} \
                                -e FLUENTBIT_RELEASE=${FLUENTBIT_RELEASE} \
                                -e OS_VARIANT=${OS_VARIANT} \
                                -e SQLITE_RELEASE=${SQLITE_RELEASE} \
                                -e WINSW_RELEASE=${WINSW_RELEASE} \
                                -e AGENT_ROOT=${AGENT_ROOT} \
                                -e NO_PROXY=${NO_PROXY} \
                                ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/windows/deploy_agents_base.sh
                        '''
                        sh '''
                            set +x
                            podman run --rm \
                                -v \$(pwd)/scripts:/app/scripts \
                                -e CD_USER=${CD_USER} \
                                -e CD_PASS=${CD_PASS} \
                                -e HOST=${HOST} \
                                -e TMP_DIR=${TMP_DIR} \
                                -e BIN_DIR=${BIN_DIR} \
                                -e HTTP_PROXY=${LOGS_HTTP_PROXY} \
                                -e VAULT_RELEASE=${VAULT_RELEASE} \
                                -e ENVCONSUL_RELEASE=${ENVCONSUL_RELEASE} \
                                -e JQ_RELEASE=${JQ_RELEASE} \
                                -e FLUENTBIT_RELEASE=${FLUENTBIT_RELEASE} \
                                -e OS_VARIANT=${OS_VARIANT} \
                                -e SQLITE_RELEASE=${SQLITE_RELEASE} \
                                -e AGENT_ROOT=${AGENT_ROOT} \
                                -e NO_PROXY=${NO_PROXY} \
                                ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/windows/deploy_agents_service.sh
                        '''
                    }
                    sh '''
                        set +x
                        podman run --rm \
                            -v \$(pwd)/scripts:/app/scripts \
                            -e INTENTION_JSON="${INTENTION_JSON}" \
                            -e BROKER_URL=${BROKER_URL} \
                            ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh end install
                    '''
                }
            }
        }
        stage('Get secret') {
            steps {
                script {
                    sh '''
                        set +x
                        podman run --rm \
                            -v \$(pwd)/scripts:/app/scripts \
                            -e INTENTION_JSON="${INTENTION_JSON}" \
                            -e BROKER_URL=${BROKER_URL} \
                            ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh start provision
                    '''
                    env.WRAPPED_FB_SECRET_ID = sh(
                        returnStdout: true,
                        script: '''
                            set +x
                            podman run --rm \
                                -v \$(pwd)/scripts:/app/scripts \
                                -e INTENTION_JSON="${INTENTION_JSON}" \
                                -e BROKER_URL=${BROKER_URL} \
                                -e FB_ROLE_ID=${FB_ROLE_ID} \
                                ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/vault_secret_id.sh
                        '''
                    ).trim()
                }
            }
        }
        stage('Start fluent bit') {
            steps {
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -e SERVER_OS=${SERVER_OS} \
                        -e CD_USER=${CD_USER} \
                        -e CD_PASS=${CD_PASS} \
                        -e HOST=${HOST} \
                        -e RUN_USER=${RUN_USER} \
                        -e VAULT_ADDR=${VAULT_ADDR} \
                        -e BIN_DIR=${BIN_DIR} \
                        -e WRAPPED_FB_SECRET_ID=${WRAPPED_FB_SECRET_ID} \
                        -e FB_ROLE_ID=${FB_ROLE_ID} \
                        -e AGENT_ROOT=${AGENT_ROOT} \
                        -e S6_SERVICE_HOME=${S6_SERVICE_HOME} \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/${SERVER_OS}/start_fluentbit_agent.sh
                '''
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -e INTENTION_JSON="${INTENTION_JSON}" \
                        -e BROKER_URL=${BROKER_URL} \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh end provision
                '''
                sh '''
                    set +x
                    podman run --rm \
                        -v \$(pwd)/scripts:/app/scripts \
                        -e INTENTION_JSON="${INTENTION_JSON}" \
                        -e BROKER_URL=${BROKER_URL} \
                        ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_action.sh end login
                '''
            }
        }
    }
    post {
        success {
            sh '''
                set +x
                podman run --rm \
                    -v \$(pwd)/scripts:/app/scripts \
                    -e INTENTION_JSON="${INTENTION_JSON}" \
                    -e BROKER_URL=${BROKER_URL} \
                    ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_close.sh 'success'
            '''
        }
        unstable {
            sh '''
                set +x
                podman run --rm \
                    -v \$(pwd)/scripts:/app/scripts \
                    -e INTENTION_JSON="${INTENTION_JSON}" \
                    -e BROKER_URL=${BROKER_URL} \
                    ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_close.sh 'failure'
            '''
        }
        failure {
            sh '''
                set +x
                podman run --rm \
                    -v \$(pwd)/scripts:/app/scripts \
                    -e INTENTION_JSON="${INTENTION_JSON}" \
                    -e BROKER_URL=${BROKER_URL} \
                    ${ARTIFACTORY_URL}/fb-helper:${IMAGE_TAG} scripts/broker_intention_close.sh 'failure'
            '''
        }
    }
}
