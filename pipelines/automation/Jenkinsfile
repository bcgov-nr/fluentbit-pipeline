import groovy.json.JsonSlurperClassic

@NonCPS
def jsonParse(def json) {
    new groovy.json.JsonSlurperClassic().parseText(json)
}

pipeline {
    agent {
        label 'master'
    }
    environment {
        PATH = "/sw_ux/node/current/bin:/sw_ux/bin:$PATH"
        PIPELINE_ARTIFACTORY_CREDS = credentials('d7d54e7d-10c1-4466-a6d6-82ea62699416')
        VAULT_ADDR = "https://vault-iit.apps.silver.devops.gov.bc.ca"
        FLUENTBIT_DEPLOYER_TOKEN = credentials('fluentbit-deployer')
        WRAPPING_TOKEN = """${sh(
                returnStdout: true,
                script: "set +x; VAULT_ADDR=$VAULT_ADDR VAULT_TOKEN=$FLUENTBIT_DEPLOYER_TOKEN /sw_ux/bin/vault token create \
                    -ttl=300 -explicit-max-ttl=300 -renewable=false -wrap-ttl=300 -field=wrapping_token"
            )}"""
        VAULT_TOKEN = """${sh(
                returnStdout: true,
                script: "set +x; VAULT_ADDR=$VAULT_ADDR VAULT_TOKEN=$WRAPPING_TOKEN /sw_ux/bin/vault unwrap -field=token"
            )}"""
        AWS_REGION = "ca-central-1"
        AWS_DEFAULT_REGION = "ca-central-1"
        OS_URL = "apm.io.nrs.gov.bc.ca"
        OS_DOMAIN = "nress-prod"
        HTTP_PROXY = setHttpProxy("http://forwardproxy.nrs.bcgov:23128")
        HTTPS_PROXY = setHttpProxy("http://forwardproxy.nrs.bcgov:23128")
        NO_PROXY = "https://vault-iit.apps.silver.devops.gov.bc.ca"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    doGenerateSubmoduleConfigurations: false,
                    gitTool: 'jgit',
                    submoduleCfg: [],
                    userRemoteConfigs: [
                        [
                            credentialsId: 'f1e16323-de75-4eac-a5a0-f1fc733e3621',
                            url: 'https://bwa.nrs.gov.bc.ca/int/stash/scm/fluentbit/fluentbit-deploy.git'
                        ]
                    ]
                ])
            }
        }
        stage('Get credentials') {
            steps {
                script {
                    env.AWS_ACCOUNT_NUMBER = sh(
                        returnStdout: true,
                        script: "set +x; VAULT_ADDR=$VAULT_ADDR VAULT_TOKEN=$VAULT_TOKEN /sw_ux/bin/vault kv get -field=aws_account_number apps/prod/jenkins/aws-automation"
                    )
                    env.AWS_ACCESS_KEY_ID = sh(
                        returnStdout: true,
                        script: "set +x; VAULT_ADDR=$VAULT_ADDR VAULT_TOKEN=$VAULT_TOKEN /sw_ux/bin/vault kv get -field=aws_access_key apps/prod/jenkins/aws-automation"
                    )
                    env.AWS_SECRET_ACCESS_KEY = sh(
                        returnStdout: true,
                        script: "set +x; VAULT_ADDR=$VAULT_ADDR VAULT_TOKEN=$VAULT_TOKEN /sw_ux/bin/vault kv get -field=aws_secret_access_key apps/prod/jenkins/aws-automation"
                    )
                    env.AWS_ASSUME_ROLE = sh(
                        returnStdout: true,
                        script: "set +x; VAULT_ADDR=$VAULT_ADDR VAULT_TOKEN=$VAULT_TOKEN /sw_ux/bin/vault kv get -field=aws_assume_role apps/prod/jenkins/aws-automation"
                    )
                }
            }
        }
        stage('Download Workflow CLI') {
            steps {
                sh 'scripts/automation_setup.sh'
            }
        }
        stage('Read Automation Queue') {
            steps {
                script {
                    // Read queue
                    def automationOutput = sh (
                        script: './bin/run automation-message',
                        returnStdout: true
                    )
                    .substring(17)
                    .trim()
                    def messageArr = jsonParse(automationOutput)
                    def serverMap = [:]
                    messageArr.each {
                        if (serverMap[it.server]) {
                          continue
                        }
                        def job = hudson.model.Hudson.instance.getItemByFullName("FLUENTBIT/fluentbit-start")
                        def params = []
                        params += new StringParameterValue('fluentbitHost', it.server)
                        def paramsAction = new ParametersAction(params)
                        def cause = new hudson.model.Cause.RemoteCause("https://apm.io.nrs.gov.bc.ca", "Automation")
                        def causeAction = new hudson.model.CauseAction(cause)

                        hudson.model.Hudson.instance.queue.schedule(job, 0, causeAction, paramsAction)
                        serverMap[it.server] = true;
                    }
                }
            }
        }
    }
}
