@Library('polaris')
import ca.bc.gov.nrids.polaris.Podman
import ca.bc.gov.nrids.polaris.BrokerIntention
import ca.bc.gov.nrids.polaris.Vault

def podman
def intention
def commonModule = [:]

pipeline {
    agent {
        label 'podman'
    }
    environment {
        CONFIG_ROLE_ID = credentials('knox-vault-jenkins-role-id')
        NR_BROKER_JWT = credentials('nr-broker-jwt')
        VAULT_ADDR = "https://vault-iit.apps.silver.devops.gov.bc.ca"
        FB_INSTALL_USER = "wwwadm"
        FB_RUN_USER = "wwwsvr"
        FB_S6_SERVICE_HOME = "/apps_ux/s6_services"
        FB_BROKER_URL = "https://nr-broker.apps.silver.devops.gov.bc.ca"
        IMAGE_TAG = "${params.imageTag}"
        AUTHFILE = "fluent-bit.auth.json"
    }
    stages {
        stage('Setup') {
            environment {
                HTTP_PROXY = "http://test-forwardproxy.nrs.bcgov:23128"
                FB_GIT_BRANCH = "${params.fbGitBranch}"
            }
            steps {
                sh 'rm -rf $(pwd)/fb && mkdir $(pwd)/fb'
                script {
                    commonModule = load "pipelines/common.groovy"
                    env.FB_CAUSE_USER_ID = commonModule.getCauseUserId()
                }
            }
        }
        stage('Get credentials') {
            steps {
                script {
                    intention = new BrokerIntention(readJSON(file: 'scripts/intention-fb-configure.json'))
                    intention.userId = commonModule.getCauseUserId()
                    intention.eventUrl = env.BUILD_URL
                    intention.open(NR_BROKER_JWT)
                    intention.startAction("login")
                    def vaultToken = intention.provisionToken("login", CONFIG_ROLE_ID)
                    def vault = new Vault(vaultToken)
                    def cdCreds = vault.read('apps/data/prod/jenkins/jenkins-polaris/artifacts-artifacts-c2053d-ehahkw-qgubfm')
                    env.REGISTRY_USERNAME = cdCreds['username']
                    env.REGISTRY_PASSWORD = cdCreds['password']
                    vault.revokeToken()
                }
            }
        }
        stage('Podman login') {
            steps {
                script {
                    podman = new Podman(this, null, "artifacts.developer.gov.bc.ca/cc20-gen-docker-local")
                    podman.login(registry: "artifacts.developer.gov.bc.ca/cc20-gen-docker-local", authfile: "${env.AUTHFILE}", options: "-u ${env.REGISTRY_USERNAME} -p ${env.REGISTRY_PASSWORD}")
                    podman.pull("fb-helper:${params.imageTag}")
                    podman.logout(httpProxy: '')
                    podman = new Podman(this)
                    podman.login(authfile: "${env.AUTHFILE}", options: "-u ${env.REGISTRY_USERNAME} -p ${env.REGISTRY_PASSWORD}")
                    podman.pull("alpine/git:latest")
                    podman.pull("hello-world:latest")
                    podman.logout(httpProxy: '')
                    intention.endAction("login")
                }
            }
        }
    }
    post {
        success {
            script {
                intention.close(true)
            }
        }
        unstable {
            script {
                if (intention) {
                    intention.close(false)
                }
            }
        }
        failure {
            script {
                if (intention) {
                    intention.close(false)
                }
            }
        }
        always {
            dir("${AUTHFILE}") {
                deleteDir()
            }
        }
    }
}
