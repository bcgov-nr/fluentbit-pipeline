import groovy.transform.Field

pipeline {
    agent {
        label 'master'
    }
    environment {
        VAULT_ADDR = "https://vault-iit.apps.silver.devops.gov.bc.ca"
        PATH = "/sw_ux/node/current/bin:/sw_ux/bin:$PATH"
        BIN_DIR = "/sw_ux/bin"
        PCI="false"
        INSTALL_USER="wwwadm"
        RUN_USER="wwwsvr"
        AGENT_ROOT = "/apps_ux/agents"
        S6_SERVICE_HOME = "/apps_ux/s6_services"
        HOST = setHost("${params.fluentbitHost}")
        BROKER_URL = "https://nr-broker.apps.silver.devops.gov.bc.ca"
        CONFIG_ROLE_ID = credentials('knox-vault-jenkins-isss-role-id')
        BASIC_HTTP_USER = "brokeruser"
        BASIC_HTTP_PASSWORD = credentials('nr-broker-password')
    }
    stages {
        stage('Get credentials') {
            steps {
                script {
                    env.INTENTION_JSON = sh(
                        returnStdout: true,
                        script: "set +x; scripts/broker_intention_open.sh scripts/intention-fb-configure.json"
                    )
                    env.VAULT_TOKEN = sh(
                        returnStdout: true,
                        script: "set +x; scripts/vault_token.sh scripts/config-jenkins.json"
                    )
                    env.CD_USER = sh(
                        returnStdout: true,
                        script: "set +x; VAULT_ADDR=$VAULT_ADDR VAULT_TOKEN=$VAULT_TOKEN /sw_ux/bin/vault kv get -field=username_lowercase groups/appdelivery/jenkins-isss-cdua"
                    )
                    env.CD_PASS = sh(
                        returnStdout: true,
                        script: "set +x; VAULT_ADDR=$VAULT_ADDR VAULT_TOKEN=$VAULT_TOKEN /sw_ux/bin/vault kv get -field=password groups/appdelivery/jenkins-isss-cdua"
                    )
                }
            }
        }
        stage('Stop fluent bit') {
            steps {
                sh 'scripts/stop_fluentbit.sh'
            }
        }
    }
    post {
        success {
            sh "set +x; scripts/broker_intention_close.sh 'success'"
        }
        unstable {
            sh "set +x; scripts/broker_intention_close.sh 'failure'"
        }
        failure {
            sh "set +x; scripts/broker_intention_close.sh 'failure'"
        }
    }
}

@Field
def checkoutDone = false
// Helper Functions
def checkoutConfig(fluentbitHost) {
    if (checkoutDone && fileExists("fb/config/server/${fluentbitHost}.json")) {
        return
    }
    checkoutDone = true
    dir("fb") {
        deleteDir()
    }
    checkout([
        $class: 'GitSCM',
        branches: [[name: '*/main']],
        doGenerateSubmoduleConfigurations: false,
        extensions: [
            [$class: 'RelativeTargetDirectory', relativeTargetDir: 'fb'],
            [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path: "config/server/${fluentbitHost}.json"]]]
        ],
        submoduleCfg: [],
        userRemoteConfigs: [
            [
                credentialsId: 'f1e16323-de75-4eac-a5a0-f1fc733e3621',
                url: 'https://bwa.nrs.gov.bc.ca/int/stash/scm/oneteam/oneteam-nr-funbucks.git'
            ]
        ]
    ])
}
def setHost(fluentbitHost) {
    checkoutConfig(fluentbitHost)
    def props = readJSON file: "fb/config/server/${fluentbitHost}.json"
    return props.address
}
